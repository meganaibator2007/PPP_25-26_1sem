

if __name__ == "__main__":
    pass # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
import pprint

# -----------------------------------------------------------------
#  –ß–∞—Å—Ç—å 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ü–ï–†–ï–°–¢–ê–ù–û–í–û–ö (–ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω)
# -----------------------------------------------------------------

def generirovat_perestanovki(elementy, logger):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥.
    
    :param elementy: –í—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–∞–±–æ—Ä (set) —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    :param logger: –í–Ω–µ—à–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è (—Å–ø–∏—Å–æ–∫) –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    :return: (list) –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫.
    """
    
    itogovye_perestanovki = []
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å
    elementy_list = list(elementy) 
    
    logger.append("--- –°–¢–ê–†–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–ï–†–ï–°–¢–ê–ù–û–í–û–ö ---")
    logger.append(f"–í—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {elementy_list}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
    rekursiya_perestanovok(
        dostupnye=elementy_list,
        tekushiy_put=[],
        itogovye_perestanovki=itogovye_perestanovki,
        logger=logger,
        uroven=0
    )
    
    logger.append("--- –ö–û–ù–ï–¶: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–ï–†–ï–°–¢–ê–ù–û–í–û–ö ---")
    return itogovye_perestanovki

def rekursiya_perestanovok(dostupnye, tekushiy_put, itogovye_perestanovki, logger, uroven):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "–≤—ã–±—Ä–∞—Ç—å –∏ –∏—Å–∫–ª—é—á–∏—Ç—å".
    """
    indent = "  " * uroven # –û—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –ª–æ–≥–∞
    
    logger.append(f"{indent}--- –í—ã–∑–æ–≤ (—É—Ä–æ–≤–µ–Ω—å {uroven}) ---")
    logger.append(f"{indent}–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {dostupnye}")
    logger.append(f"{indent}–ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–µ–∫—É—â–∏–π –ø—É—Ç—å): {tekushiy_put}")

    # --- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π —Ä–µ–∫—É—Ä—Å–∏–∏ ---
    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç, –º—ã —Å–æ–±—Ä–∞–ª–∏ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É.
    if not dostupnye:
        logger.append(f"{indent}!!! –†–ï–ó–£–õ–¨–¢–ê–¢: {tekushiy_put} (–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥)")
        itogovye_perestanovki.append(tekushiy_put.copy()) # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –ö–û–ü–ò–Æ
        logger.append(f"{indent}--- –í–æ–∑–≤—Ä–∞—Ç (–±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π) ---")
        return

    # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ ---
    # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∫–∞–∂–¥—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for i in range(len(dostupnye)):
        
        # 1. –í–´–ë–û–†: –ë–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç
        vybranniy = dostupnye[i]
        
        # 2. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –î–ê–ù–ù–´–•:
        # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–≤—Å–µ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –º—ã –≤–∑—è–ª–∏)
        novye_dostupnye = dostupnye[:i] + dostupnye[i+1:]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
        tekushiy_put.append(vybranniy)
        
        logger.append(f"{indent}-> –®–∞–≥: –í—ã–±–∏—Ä–∞–µ–º '{vybranniy}'. –ü—É—Ç—å: {tekushiy_put}. –û—Å—Ç–∞–ª–∏—Å—å: {novye_dostupnye}")

        # 3. –†–ï–ö–£–†–°–ò–í–ù–´–ô –í–´–ó–û–í:
        # –£—Ö–æ–¥–∏–º –≤–≥–ª—É–±—å —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        rekursiya_perestanovok(
            dostupnye=novye_dostupnye,
            tekushiy_put=tekushiy_put,
            itogovye_perestanovki=itogovye_perestanovki,
            logger=logger,
            uroven=uroven + 1
        )
        
        # 4. "–®–ê–ì –ù–ê–ó–ê–î" (Backtracking):
        # –ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ —Ä–µ–∫—É—Ä—Å–∏–∏. –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—É—Ç–∏,
        # —á—Ç–æ–±—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ for –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç.
        udalenniy = tekushiy_put.pop()
        logger.append(f"{indent}<- –ù–∞–∑–∞–¥: –£–±–∏—Ä–∞–µ–º '{udalenniy}'. –ü—É—Ç—å: {tekushiy_put}. (–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {uroven})")

    logger.append(f"{indent}--- –í–æ–∑–≤—Ä–∞—Ç (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ü–∏–∫–ª –Ω–∞ —É—Ä–æ–≤–Ω–µ {uroven}) ---")

# -----------------------------------------------------------------
#  –ß–∞—Å—Ç—å 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ö–û–ú–ë–ò–ù–ê–¶–ò–ô (–ü–æ—Ä—è–¥–æ–∫ –ù–ï –≤–∞–∂–µ–Ω)
#  (–¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ "Power Set" –∏–ª–∏ "–í—Å–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞")
# -----------------------------------------------------------------

def generirovat_kombinatsii(elementy, logger):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥.
    
    :param elementy: –í—Ö–æ–¥–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–∞–±–æ—Ä (set) —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    :param logger: –í–Ω–µ—à–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è (—Å–ø–∏—Å–æ–∫) –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    :return: (list) –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤).
    """
    
    itogovye_kombinatsii = []
    elementy_list = list(elementy) # –ù—É–∂–Ω—ã –∏–Ω–¥–µ–∫—Å—ã
    
    logger.append("--- –°–¢–ê–†–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ---")
    logger.append(f"–í—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {elementy_list}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
    rekursiya_kombinatsiy(
        elementy_list=elementy_list,
        start_index=0,
        tekushiy_put=[],
        itogovye_kombinatsii=itogovye_kombinatsii,
        logger=logger,
        uroven=0
    )
    
    logger.append("--- –ö–û–ù–ï–¶: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ---")
    return itogovye_kombinatsii

def rekursiya_kombinatsiy(elementy_list, start_index, tekushiy_put, itogovye_kombinatsii, logger, uroven):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "–≤–∑—è—Ç—å –∏–ª–∏ –Ω–µ –≤–∑—è—Ç—å".
    """
    indent = "  " * uroven
    
    logger.append(f"{indent}--- –í—ã–∑–æ–≤ (—É—Ä–æ–≤–µ–Ω—å {uroven}) ---")
    logger.append(f"{indent}–ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞: {start_index}")
    logger.append(f"{indent}–ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–µ–∫—É—â–∏–π –ø—É—Ç—å): {tekushiy_put}")

    # --- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π —Ä–µ–∫—É—Ä—Å–∏–∏ ---
    # –ú—ã –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞. –¢–µ–∫—É—â–∏–π –ø—É—Ç—å - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π.
    if start_index == len(elementy_list):
        logger.append(f"{indent}!!! –†–ï–ó–£–õ–¨–¢–ê–¢: {tekushiy_put} (–î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Ç–æ–≥)")
        itogovye_kombinatsii.append(tekushiy_put.copy())
        logger.append(f"{indent}--- –í–æ–∑–≤—Ä–∞—Ç (–±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π) ---")
        return
        
    # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —à–∞–≥ ---
    # –£ –Ω–∞—Å –µ—Å—Ç—å 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ elementy_list[start_index]:
    
    element = elementy_list[start_index]
    
    # 1. "–ù–ï –í–ó–Ø–¢–¨":
    # –ú—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
    logger.append(f"{indent}-> –®–∞–≥ 1: –ù–ï –í–´–ë–ò–†–ê–ï–ú '{element}'. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω–¥–µ–∫—Å—É {start_index + 1}.")
    rekursiya_kombinatsiy(
        elementy_list=elementy_list,
        start_index=start_index + 1,
        tekushiy_put=tekushiy_put,
        itogovye_kombinatsii=itogovye_kombinatsii,
        logger=logger,
        uroven=uroven + 1
    )
    
    # 2. "–í–ó–Ø–¢–¨":
    # –ú—ã –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø—É—Ç—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
    logger.append(f"{indent}-> –®–∞–≥ 2: –í–´–ë–ò–†–ê–ï–ú '{element}'.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É—Ç—å
    tekushiy_put.append(element)
    logger.append(f"{indent}   –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {tekushiy_put}")

    rekursiya_kombinatsiy(
        elementy_list=elementy_list,
        start_index=start_index + 1,
        tekushiy_put=tekushiy_put,
        itogovye_kombinatsii=itogovye_kombinatsii,
        logger=logger,
        uroven=uroven + 1
    )
    
    # "–®–ê–ì –ù–ê–ó–ê–î" (Backtracking):
    # –ú—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ —Ä–µ–∫—É—Ä—Å–∏–∏ "–í–ó–Ø–¢–¨". –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—É—Ç–∏,
    # —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –≤–µ—Ç–∫–µ "–ù–ï –í–ó–Ø–¢–¨", –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤—ã—à–µ.
    udalenniy = tekushiy_put.pop()
    logger.append(f"{indent}<- –ù–∞–∑–∞–¥: –£–±–∏—Ä–∞–µ–º '{udalenniy}'. –ü—É—Ç—å: {tekushiy_put}. (–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {uroven})")

    logger.append(f"{indent}--- –í–æ–∑–≤—Ä–∞—Ç (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –æ–±–∞ —à–∞–≥–∞ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ {start_index}) ---")


# -----------------------------------------------------------------
#  –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# -----------------------------------------------------------------
if __name__ == "__main__":
    
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä, —á—Ç–æ–±—ã –ª–æ–≥ –±—ã–ª —á–∏—Ç–∞–µ–º—ã–º
    vhodnoy_nabor = {'A', 'B'} 
    # –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ {'A', 'B', 'C'}, –Ω–æ –ª–æ–≥ –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –±–æ–ª—å—à–∏–º

    print("=" * 60)
    print("         –ó–ê–î–ê–ù–ò–ï 1: –ü–ï–†–ï–°–¢–ê–ù–û–í–ö–ò (–ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω)")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–∞
    log_perestanovok = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    rezultat_p = generirovat_perestanovki(vhodnoy_nabor, log_perestanovok)
    
    print("\n--- üèÅ –ò—Ç–æ–≥–æ–≤—ã–µ –ü–ï–†–ï–°–¢–ê–ù–û–í–ö–ò: ---")
    pprint.pprint(rezultat_p)
    
    print("\n--- üìã –ü–æ–ª–Ω—ã–π –õ–û–ì –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏): ---")
    for shag in log_perestanovok:
        print(shag)
        
        
    print("\n\n" + "=" * 60)
    print("         –ó–ê–î–ê–ù–ò–ï 2: –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (–ü–æ—Ä—è–¥–æ–∫ –ù–ï –≤–∞–∂–µ–Ω)")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω—é—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–∞
    log_kombinatsiy = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    rezultat_k = generirovat_kombinatsii(vhodnoy_nabor, log_kombinatsiy)
    
    print("\n--- üèÅ –ò—Ç–æ–≥–æ–≤—ã–µ –ö–û–ú–ë–ò–ù–ê–¶–ò–ò (–í—Å–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞): ---")
    pprint.pprint(rezultat_k)
    
    print("\n--- üìã –ü–æ–ª–Ω—ã–π –õ–û–ì –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏): ---")
    for shag in log_kombinatsiy:
        print(shag)
