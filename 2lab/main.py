

if __name__ == "__main__":
    pass # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
def apply_caesar(text: str, shift: int) -> str:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è –∫ —Å—Ç—Ä–æ–∫–µ.
    
    - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä (A-Z –∏ a-z).
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "–∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ" (z -> a –ø—Ä–∏ c1, a -> z –ø—Ä–∏ c-1).
    """
    result = []
    for char in text:
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ (a-z)
        if 'a' <= char <= 'z':
            # –ù–∞—Ö–æ–¥–∏–º "–±–∞–∑—É" (–∫–æ–¥ –±—É–∫–≤—ã 'a')
            base = ord('a')
            # (ord(char) - base) -> 0 –¥–ª—è 'a', 1 –¥–ª—è 'b', ... 25 –¥–ª—è 'z'
            # (% 26) -> –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–¥–≤–∏–≥ (26 % 26 = 0, 27 % 26 = 1, -1 % 26 = 25)
            new_ord = (ord(char) - base + shift) % 26 + base
            result.append(chr(new_ord))
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –±—É–∫–≤ (A-Z)
        elif 'A' <= char <= 'Z':
            base = ord('A')
            new_ord = (ord(char) - base + shift) % 26 + base
            result.append(chr(new_ord))
        
        # 3. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        else:
            result.append(char)
            
    return "".join(result)

def apply_reverse(text: str) -> str:
    """
    –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥.
    """
    # [::-1] - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–µ–∑ (slice) –≤ Python –¥–ª—è —Ä–µ–≤–µ—Ä—Å–∞
    return text[::-1]

def process_commands(initial_text: str, command_string: str) -> (list, str | None):
    """
    –ü–æ—à–∞–≥–æ–≤–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–µ–ø–æ—á–∫—É –∫–æ–º–∞–Ω–¥ –∫ —Å—Ç—Ä–æ–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    (history: list) - –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç—Ä–æ–∫–∏, –≤–∫–ª—é—á–∞—è –Ω–∞—á–∞–ª—å–Ω–æ–µ.
    (error: str | None) - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –∏–Ω–∞—á–µ None.
    """
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    # history —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —à–∞–≥–∏. –ù–∞—á–∏–Ω–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    history = [initial_text]
    current_text = initial_text
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥ "c1 r c-1" –Ω–∞ —Å–ø–∏—Å–æ–∫ ["c1", "r", "c-1"]
    commands = command_string.split()

    # 2. –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    for cmd in commands:
        try:
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "r" (–†–µ–≤–µ—Ä—Å) ---
            if cmd == 'r':
                current_text = apply_reverse(current_text)
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "c" (–¶–µ–∑–∞—Ä—å) ---
            elif cmd.startswith('c'):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ –ø–æ—Å–ª–µ 'c'
                shift_str = cmd[1:]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ "c" –Ω–µ –ø—É—Å—Ç–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "c")
                if not shift_str:
                    raise ValueError("–ö–æ–º–∞–Ω–¥–∞ 'c' —Ç—Ä–µ–±—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–≥–æ —Å–¥–≤–∏–≥–∞ (c1, c-2)")
                    
                shift = int(shift_str)
                current_text = apply_caesar(current_text, shift)
                
            # --- –ú–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ---
            # –°—é–¥–∞ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            # elif cmd == 'd':
            #    current_text = apply_duplicate(current_text)
            # -------------------------------
                
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã ---
            else:
                error_msg = f"–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{cmd}'."
                print(error_msg)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –æ—à–∏–±–∫–∏ –∏ —Å–∞–º—É –æ—à–∏–±–∫—É
                return history, error_msg

            # –ï—Å–ª–∏ —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append(current_text)

        except ValueError:
            # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ 'c' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "c-a" –∏–ª–∏ "c1.5")
            error_msg = f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{cmd}'."
            print(error_msg)
            return history, error_msg
        except Exception as e:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{cmd}': {e}"
            print(error_msg)
            return history, error_msg

    # 3. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏
    return history, None

# --- –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ---

print("--- 1. –¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑ –∑–∞–¥–∞–Ω–∏—è ---")
text1 = "abcd"
cmds1 = "c1 r c-1 r"
print(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{text1}'")
print(f"–ö–æ–º–∞–Ω–¥—ã: '{cmds1}'")

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
history1, error1 = process_commands(text1, cmds1)

# –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("\nüìú –ü–æ—à–∞–≥–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
for i, step in enumerate(history1):
    if i == 0:
        print(f"  –®–∞–≥ 0 (–°—Ç–∞—Ä—Ç): '{step}'")
    else:
        print(f"  –®–∞–≥ {i} (–ø–æ—Å–ª–µ {cmds1.split()[i-1]}): '{step}'")

if error1:
    print(f"\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ï–†–í–ê–ù–ê: {error1}")
else:
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{history1[-1]}'")


print("\n" + "="*40 + "\n")

print("--- 2. –¢–µ—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---")
text2 = "Hello World!"
cmds2 = "c5 r c-a x1" # "c-a" - –æ—à–∏–±–∫–∞ ValueError, "x1" - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
print(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{text2}'")
print(f"–ö–æ–º–∞–Ω–¥—ã: '{cmds2}'")

history2, error2 = process_commands(text2, cmds2)

print("\nüìú –ü–æ—à–∞–≥–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
for i, step in enumerate(history2):
    if i == 0:
        print(f"  –®–∞–≥ 0 (–°—Ç–∞—Ä—Ç): '{step}'")
    else:
        print(f"  –®–∞–≥ {i} (–ø–æ—Å–ª–µ {cmds2.split()[i-1]}): '{step}'")

if error2:
    print(f"\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ï–†–í–ê–ù–ê: {error2}")
else:
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{history2[-1]}'")
