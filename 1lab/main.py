

if __name__ == "__main__":
    pass # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
import random

def sozdat_pole(N, M):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤) N x M
    –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ 0 –∏–ª–∏ 1.
    """
    pole = []
    for _ in range(N):
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (—Ä—è–¥)
        ryad = [random.randint(0, 1) for _ in range(M)]
        pole.append(ryad)
    return pole

def poschitat_stroki_i_stolbtsy(pole, N, M):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    –∏–º–µ—é—Ç —Å—É–º–º—É > 3.
    """
    # --- –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ ---
    # sum(ryad) –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
    kolichestvo_strok = 0
    for ryad in pole:
        if sum(ryad) > 3:
            kolichestvo_strok += 1

    # --- –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã ---
    kolichestvo_stolbtsov = 0
    # –ò–¥–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É (–∏–Ω–¥–µ–∫—Å c)
    for c in range(M):
        summa_stolbtsa = 0
        # –ò–¥–µ–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ (–∏–Ω–¥–µ–∫—Å r)
        for r in range(N):
            summa_stolbtsa += pole[r][c]
        
        if summa_stolbtsa > 3:
            kolichestvo_stolbtsov += 1
            
    return kolichestvo_strok, kolichestvo_stolbtsov

def naiti_ostrova(pole, N, M):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö "–æ—Å—Ç—Ä–æ–≤–æ–≤" –∏–∑ 1.
    """
    # –°–æ–∑–¥–∞–µ–º "–∫–∞—Ä—Ç—É" –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫, —á—Ç–æ–±—ã –Ω–µ —Ö–æ–¥–∏—Ç—å –¥–≤–∞–∂–¥—ã
    # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–Ω–∞ –≤—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ False (–Ω–µ –ø–æ—Å–µ—â–µ–Ω–æ)
    posetili = [[False for _ in range(M)] for _ in range(N)]
    
    razmery_ostrovov = []

    def poisk_sosedey(r, c):
        """ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫) """
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è ---
        # 1. –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)
        if r < 0 or r >= N:
            return 0
        # 2. –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã (–≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
        if c < 0 or c >= M:
            return 0
        # 3. –ï—Å–ª–∏ —ç—Ç–æ "–≤–æ–¥–∞" (0)
        if pole[r][c] == 0:
            return 0
        # 4. –ï—Å–ª–∏ –º—ã —Ç—É—Ç —É–∂–µ –±—ã–ª–∏
        if posetili[r][c]:
            return 0
        # ---
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —á–∞—Å—Ç—å –æ—Å—Ç—Ä–æ–≤–∞
        
        # 1. –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º—ã —Ç—É—Ç –±—ã–ª–∏
        posetili[r][c] = True
        
        # 2. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä = 1 (—ç—Ç–∞ —è—á–µ–π–∫–∞)
        tekushiy_razmer = 1
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö 4-—Ö —Å–æ—Å–µ–¥–µ–π
        tekushiy_razmer += poisk_sosedey(r + 1, c) # –í–Ω–∏–∑
        tekushiy_razmer += poisk_sosedey(r - 1, c) # –í–≤–µ—Ä—Ö
        tekushiy_razmer += poisk_sosedey(r, c + 1) # –í–ø—Ä–∞–≤–æ
        tekushiy_razmer += poisk_sosedey(r, c - 1) # –í–ª–µ–≤–æ
        
        return tekushiy_razmer

    # --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª: –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ –ø–æ–ª—è ---
    for r in range(N):
        for c in range(M):
            # –ï—Å–ª–∏ —ç—Ç–æ '1' –∏ –º—ã —Ç–∞–º –µ—â–µ –Ω–µ –±—ã–ª–∏ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –æ—Å—Ç—Ä–æ–≤
            if pole[r][c] == 1 and not posetili[r][c]:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–µ—Å—å –æ—Å—Ç—Ä–æ–≤
                razmer = poisk_sosedey(r, c)
                razmery_ostrovov.append(razmer)
                
    return razmery_ostrovov

def pechat_polya(pole):
    """–ö—Ä–∞—Å–∏–≤–æ –ø–µ—á–∞—Ç–∞–µ—Ç –ø–æ–ª–µ"""
    for ryad in pole:
        # ' '.join(...) –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [1, 0, 1] –≤ —Å—Ç—Ä–æ–∫—É "1 0 1"
        print(' '.join([str(kletka) for kletka in ryad]))


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ---

# 1. –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
N_STROK = 6
M_STOLBTSOV = 8

# 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–µ
igrovoe_pole = sozdat_pole(N_STROK, M_STOLBTSOV)
print(f"--- üé≤ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ ({N_STROK}x{M_STOLBTSOV}) ---")
pechat_polya(igrovoe_pole)
print("-" * 30)

# 3. –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
stroki, stolbtsy = poschitat_stroki_i_stolbtsy(igrovoe_pole, N_STROK, M_STOLBTSOV)
print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–≥–¥–µ > 3 –µ–¥–∏–Ω–∏—Ü): {stroki}")
print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≥–¥–µ > 3 –µ–¥–∏–Ω–∏—Ü): {stolbtsy}")
print("-" * 30)

# 4. –ò—â–µ–º –æ—Å—Ç—Ä–æ–≤–∞
razmery = naiti_ostrova(igrovoe_pole, N_STROK, M_STOLBTSOV)
print(f"üèùÔ∏è  –ù–∞–π–¥–µ–Ω–Ω—ã–µ '–æ—Å—Ç—Ä–æ–≤–∞' –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã: {razmery}")
print(f"    –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤: {len(razmery)}")
